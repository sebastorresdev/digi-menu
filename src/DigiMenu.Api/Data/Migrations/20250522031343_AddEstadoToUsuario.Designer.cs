// <auto-generated />
using System;
using DigiMenu.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DigiMenu.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250522031343_AddEstadoToUsuario")]
    partial class AddEstadoToUsuario
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.CategoriaInsumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoSunat")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("codigo_sunat");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("categoria_insumos_pkey");

                    b.HasIndex(new[] { "Nombre" }, "categoria_insumos_nombre_key")
                        .IsUnique();

                    b.ToTable("categoria_insumos", (string)null);
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.CategoriasProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("categorias_productos_pkey");

                    b.HasIndex(new[] { "Nombre" }, "categorias_productos_nombre_key")
                        .IsUnique();

                    b.ToTable("categorias_productos", (string)null);
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("direccion");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("PaginaWeb")
                        .HasColumnType("text")
                        .HasColumnName("pagina_web");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("razon_social");

                    b.Property<string>("Ruc")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ruc");

                    b.Property<string>("Sucursal")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sucursal");

                    b.Property<string>("Telefono")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("telefono");

                    b.HasKey("Id")
                        .HasName("empresa_pkey");

                    b.HasIndex(new[] { "Email" }, "empresa_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Ruc" }, "empresa_ruc_key")
                        .IsUnique();

                    b.ToTable("empresa", (string)null);
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.Estacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("estaciones_pkey");

                    b.HasIndex(new[] { "Nombre" }, "estaciones_nombre_key")
                        .IsUnique();

                    b.ToTable("estaciones", (string)null);
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.Impresora", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EstacionId")
                        .HasColumnType("integer")
                        .HasColumnName("estacion_id");

                    b.Property<string>("Ip")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ip");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nombre");

                    b.Property<string>("Puerto")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("puerto");

                    b.Property<string>("Tipo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tipo");

                    b.HasKey("Id")
                        .HasName("impresoras_pkey");

                    b.HasIndex("EstacionId");

                    b.HasIndex(new[] { "Ip" }, "impresoras_ip_key")
                        .IsUnique();

                    b.ToTable("impresoras", (string)null);
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.Insumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoriaInsumoId")
                        .HasColumnType("integer")
                        .HasColumnName("categoria_insumo_id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nombre");

                    b.Property<decimal?>("PrecioUnitario")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("precio_unitario")
                        .HasDefaultValueSql("0");

                    b.Property<decimal?>("StockActual")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("stock_actual")
                        .HasDefaultValueSql("0");

                    b.Property<decimal?>("StockMinimo")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("stock_minimo")
                        .HasDefaultValueSql("0");

                    b.Property<int>("UnidadId")
                        .HasColumnType("integer")
                        .HasColumnName("unidad_id");

                    b.HasKey("Id")
                        .HasName("insumos_pkey");

                    b.HasIndex("CategoriaInsumoId");

                    b.HasIndex("UnidadId");

                    b.HasIndex(new[] { "Nombre" }, "insumos_nombre_key")
                        .IsUnique();

                    b.ToTable("insumos", (string)null);
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.Mesa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacidad")
                        .HasColumnType("integer")
                        .HasColumnName("capacidad");

                    b.Property<string>("Estado")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("estado");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("nombre");

                    b.Property<int>("SalonId")
                        .HasColumnType("integer")
                        .HasColumnName("salon_id");

                    b.HasKey("Id")
                        .HasName("mesas_pkey");

                    b.HasIndex("SalonId");

                    b.HasIndex(new[] { "Nombre" }, "mesas_nombre_key")
                        .IsUnique();

                    b.ToTable("mesas", (string)null);
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Estado")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("Fecha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("MesaId")
                        .HasColumnType("integer")
                        .HasColumnName("mesa_id");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id")
                        .HasName("pedidos_pkey");

                    b.HasIndex("MesaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("pedidos", (string)null);
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.PedidoDetalle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pedido_detalle_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.Property<string>("Estado")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("estado");

                    b.Property<string>("Observacion")
                        .HasColumnType("text")
                        .HasColumnName("observacion");

                    b.Property<int>("PedidoId")
                        .HasColumnType("integer")
                        .HasColumnName("pedido_id");

                    b.Property<int>("ProductoId")
                        .HasColumnType("integer")
                        .HasColumnName("producto_id");

                    b.HasKey("Id")
                        .HasName("pedido_detalle_pkey");

                    b.HasIndex("PedidoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("pedido_detalle", (string)null);
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.Permiso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("permisos_pkey");

                    b.ToTable("permisos", (string)null);
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaProductoId")
                        .HasColumnType("integer")
                        .HasColumnName("categoria_producto_id");

                    b.Property<int>("EstacionId")
                        .HasColumnType("integer")
                        .HasColumnName("estacion_id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nombre");

                    b.Property<decimal>("Precio")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("precio");

                    b.HasKey("Id")
                        .HasName("productos_pkey");

                    b.HasIndex("CategoriaProductoId");

                    b.HasIndex("EstacionId");

                    b.ToTable("productos", (string)null);
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.RecetaProducto", b =>
                {
                    b.Property<int>("ProductoId")
                        .HasColumnType("integer")
                        .HasColumnName("producto_id");

                    b.Property<int>("InsumoId")
                        .HasColumnType("integer")
                        .HasColumnName("insumo_id");

                    b.Property<decimal>("Cantidad")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("cantidad");

                    b.HasKey("ProductoId", "InsumoId")
                        .HasName("receta_productos_pkey");

                    b.HasIndex("InsumoId");

                    b.ToTable("receta_productos", (string)null);
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("roles_pkey");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.Salon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Capacidad")
                        .HasColumnType("integer")
                        .HasColumnName("capacidad");

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("estado");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("salones_pkey");

                    b.HasIndex(new[] { "Nombre" }, "salones_nombre_key")
                        .IsUnique();

                    b.ToTable("salones", (string)null);
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.UnidadMedida", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre");

                    b.Property<string>("Simbolo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("simbolo");

                    b.HasKey("Id")
                        .HasName("unidades_medida_pkey");

                    b.HasIndex(new[] { "Nombre" }, "unidades_medida_nombre_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Simbolo" }, "unidades_medida_simbolo_key")
                        .IsUnique();

                    b.ToTable("unidades_medida", (string)null);
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("apellidos");

                    b.Property<string>("Direccion")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("direccion");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("hash_password");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nombres");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("numero_documento");

                    b.Property<int?>("RolId")
                        .HasColumnType("integer")
                        .HasColumnName("rol_id");

                    b.Property<string>("TipoDocumento")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tipo_documento");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("usuarios_pkey");

                    b.HasIndex("RolId");

                    b.HasIndex(new[] { "NumeroDocumento" }, "usuarios_numero_documento_key")
                        .IsUnique();

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("RolesPermiso", b =>
                {
                    b.Property<int>("RolId")
                        .HasColumnType("integer")
                        .HasColumnName("rol_id");

                    b.Property<int>("PermisoId")
                        .HasColumnType("integer")
                        .HasColumnName("permiso_id");

                    b.HasKey("RolId", "PermisoId")
                        .HasName("roles_permisos_pkey");

                    b.HasIndex("PermisoId");

                    b.ToTable("roles_permisos", (string)null);
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.Impresora", b =>
                {
                    b.HasOne("DigiMenu.Api.Data.Entities.Estacion", "Estacion")
                        .WithMany("Impresoras")
                        .HasForeignKey("EstacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("impresoras_estacion_id_fkey");

                    b.Navigation("Estacion");
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.Insumo", b =>
                {
                    b.HasOne("DigiMenu.Api.Data.Entities.CategoriaInsumo", "CategoriaInsumo")
                        .WithMany("Insumos")
                        .HasForeignKey("CategoriaInsumoId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("insumos_categoria_insumo_id_fkey");

                    b.HasOne("DigiMenu.Api.Data.Entities.UnidadMedida", "Unidad")
                        .WithMany("Insumos")
                        .HasForeignKey("UnidadId")
                        .IsRequired()
                        .HasConstraintName("insumos_unidad_id_fkey");

                    b.Navigation("CategoriaInsumo");

                    b.Navigation("Unidad");
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.Mesa", b =>
                {
                    b.HasOne("DigiMenu.Api.Data.Entities.Salon", "Salon")
                        .WithMany("Mesas")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mesas_salon_id_fkey");

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.Pedido", b =>
                {
                    b.HasOne("DigiMenu.Api.Data.Entities.Mesa", "Mesa")
                        .WithMany("Pedidos")
                        .HasForeignKey("MesaId")
                        .IsRequired()
                        .HasConstraintName("pedidos_mesa_id_fkey");

                    b.HasOne("DigiMenu.Api.Data.Entities.Usuario", "Usuario")
                        .WithMany("Pedidos")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("pedidos_usuario_id_fkey");

                    b.Navigation("Mesa");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.PedidoDetalle", b =>
                {
                    b.HasOne("DigiMenu.Api.Data.Entities.Pedido", "Pedido")
                        .WithMany("PedidoDetalles")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pedido_detalle_pedido_id_fkey");

                    b.HasOne("DigiMenu.Api.Data.Entities.Producto", "Producto")
                        .WithMany("PedidoDetalles")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("pedido_detalle_producto_id_fkey");

                    b.Navigation("Pedido");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.Producto", b =>
                {
                    b.HasOne("DigiMenu.Api.Data.Entities.CategoriasProducto", "CategoriaProducto")
                        .WithMany("Productos")
                        .HasForeignKey("CategoriaProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("productos_categoria_producto_id_fkey");

                    b.HasOne("DigiMenu.Api.Data.Entities.Estacion", "Estacion")
                        .WithMany("Productos")
                        .HasForeignKey("EstacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("productos_estacion_id_fkey");

                    b.Navigation("CategoriaProducto");

                    b.Navigation("Estacion");
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.RecetaProducto", b =>
                {
                    b.HasOne("DigiMenu.Api.Data.Entities.Insumo", "Insumo")
                        .WithMany("RecetaProductos")
                        .HasForeignKey("InsumoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("receta_productos_insumo_id_fkey");

                    b.HasOne("DigiMenu.Api.Data.Entities.Producto", "Producto")
                        .WithMany("RecetaProductos")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("receta_productos_producto_id_fkey");

                    b.Navigation("Insumo");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.Usuario", b =>
                {
                    b.HasOne("DigiMenu.Api.Data.Entities.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("usuarios_rol_id_fkey");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("RolesPermiso", b =>
                {
                    b.HasOne("DigiMenu.Api.Data.Entities.Permiso", null)
                        .WithMany()
                        .HasForeignKey("PermisoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("roles_permisos_permiso_id_fkey");

                    b.HasOne("DigiMenu.Api.Data.Entities.Rol", null)
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("roles_permisos_rol_id_fkey");
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.CategoriaInsumo", b =>
                {
                    b.Navigation("Insumos");
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.CategoriasProducto", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.Estacion", b =>
                {
                    b.Navigation("Impresoras");

                    b.Navigation("Productos");
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.Insumo", b =>
                {
                    b.Navigation("RecetaProductos");
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.Mesa", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.Pedido", b =>
                {
                    b.Navigation("PedidoDetalles");
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.Producto", b =>
                {
                    b.Navigation("PedidoDetalles");

                    b.Navigation("RecetaProductos");
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.Salon", b =>
                {
                    b.Navigation("Mesas");
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.UnidadMedida", b =>
                {
                    b.Navigation("Insumos");
                });

            modelBuilder.Entity("DigiMenu.Api.Data.Entities.Usuario", b =>
                {
                    b.Navigation("Pedidos");
                });
#pragma warning restore 612, 618
        }
    }
}
